Microsoft (R) Macro Assembler Version 6.11		    12/01/14 12:10:05
d.asm							     Page 1 - 1


				;David Tulis bqb428
				;CPEN3710 lab 12
				;Due 12/1/14

				;this is a real mode program
				;user can either inputs name of file+extension as a command line argument
				;or the user can not enter any arguments and enter the name in the command line
				;if the file exists in the current directory, we open it
				;print out file name and date last modified
				;format: 5:05 a.m. January 6, 2014

				;if the file does not exist, we must display an error message
				;we must not change the file (open it in read only mode)

				Include Irvine16.inc
			      C .NOLIST
			      C .LIST
			      C 

				;macro to write a string to the console
				mWriteString MACRO buffer:REQ
					push dx
					mov dx, offset buffer
					call writestring
					pop dx
				ENDM

				;macro to write a word to the console
				mWriteDecWord MACRO num:REQ
					push ax
					mov ax, num
					call writedec
					pop ax
				ENDM

 0000				.data
 0000 45 6E 74 65 72 20		enterString byte "Enter name of file: ",0
       6E 61 6D 65 20 6F
       66 20 66 69 6C 65
       3A 20 00
 0015 77 61 73 20 6C 61		modifiedString byte "was last modified at ",0
       73 74 20 6D 6F 64
       69 66 69 65 64 20
       61 74 20 00
 002B 6F 6E 20 00		onString byte "on ",0
 002F  000B [			file byte 11 DUP(?)			;11 is the max file name size in FAT
        00
       ]
 003A 46 69 6C 65 20 6E		fileNotFoundString byte "File not found, please try again",0
       6F 74 20 66 6F 75
       6E 64 2C 20 70 6C
       65 61 73 65 20 74
       72 79 20 61 67 61
       69 6E 00
 005B 45 72 72 6F 72 20		errorString byte "Error getting date info from file",0
       67 65 74 74 69 6E
       67 20 64 61 74 65
       20 69 6E 66 6F 20
       66 72 6F 6D 20 66
       69 6C 65 00
 007D 61 2E 6D 2E 20 00		am byte "a.m. ",0
 0083 70 2E 6D 2E 20 00		pm byte "p.m. ",0
 0089 20 00			space byte " ",0
 008B 3A 00			colon byte ":",0
 008D 2C 20 00			comma byte ", ",0
 0090 4A 61 6E 75 61 72		janString BYTE "January ",0
       79 20 00
 0099 46 65 62 72 75 61		febString BYTE "February ",0
       72 79 20 00
 00A3 4D 61 72 63 68 20		marString BYTE "March ",0
       00
 00AA 41 70 72 69 6C 20		aprString BYTE "April ",0
       00
 00B1 4D 61 79 20 00		mayString BYTE "May ",0
 00B6 4A 75 6E 65 20 00		junString BYTE "June ",0
 00BC 4A 75 6C 79 20 00		julString BYTE "July ",0
 00C2 41 75 67 75 73 74		augString BYTE "August ",0
       20 00
 00CA 53 65 70 74 65 6D		sepString BYTE "September ",0
       62 65 72 20 00
 00D5 4F 63 74 6F 62 65		octString BYTE "October ",0
       72 20 00
 00DE 4E 6F 76 65 6D 62		novString BYTE "November ",0
       65 72 20 00
 00E8 44 65 63 65 6D 62		decString BYTE "December ",0
       65 72 20 00
 00F2 45 72 72 6F 72 20		errorMonthString BYTE "Error printing month",0
       70 72 69 6E 74 69
       6E 67 20 6D 6F 6E
       74 68 00

 0000				.code
 0000				main PROC
 0000  B8 ---- R			mov ax, @data		;move address of data segment into ax
 0003  8E D8				mov ds, ax		;set ds as our data segment
					
 0005  BA 002F R			mov dx, offset file	;move the buffer into dx
 0008  E8 01B4				call getcommandtail	;call to get the command tail and put it in the buffer specified by dx
 000B  73 11				jnc skipUserInput	;a cleared carry flag means no command line args, so we ask the user for input
					
 000D					input:
					mWriteString enterString	;ask the user to input a file name
 000D  52		     1		push dx
 000E  BA 0000 R	     1		mov dx, offset enterString
 0011  E8 0000 E	     1		call writestring
 0014  5A		     1		pop dx
					
 0015  BA 002F R			mov dx, offset file			;the offset in memory of the name of the file
 0018  B9 000B				mov cx, sizeof file			;the size of the buffer
 001B  E8 0000 E			call readstring				;get filename from user
					
 001E					skipUserInput:				;we jump here if the command line args were empty
					
 001E  B4 3D				mov ah, 3dh		;open file
 0020  B0 00				mov al, 0		;read only
 0022  BA 002F R			mov dx, offset file	;file name
 0025  CD 21				int 21h			;ax has file handle
 0027  0F 82 0173			jc fileNotFound		;carry flag set means the file was not found
 002B  8B D8				mov bx, ax		;bx has file handle
					
 002D  B4 57				mov ah, 57h		;get a file's date and time stamp
 002F  B0 00				mov al, 00h		;get
								;bx has file handle
 0031  CD 21				int 21h			;cx has time, dx has date
 0033  0F 82 0175			jc errorDate		;carry flag means there was some error
 0037  51				push cx			;save cx, because we will be shifting it around
					
					mWriteString file	;print name of file
 0038  52		     1		push dx
 0039  BA 002F R	     1		mov dx, offset file
 003C  E8 0000 E	     1		call writestring
 003F  5A		     1		pop dx
					mWriteString space	;print a space
 0040  52		     1		push dx
 0041  BA 0089 R	     1		mov dx, offset space
 0044  E8 0000 E	     1		call writestring
 0047  5A		     1		pop dx
					mWriteString modifiedString	;print "was last modified on"
 0048  52		     1		push dx
 0049  BA 0015 R	     1		mov dx, offset modifiedString
 004C  E8 0000 E	     1		call writestring
 004F  5A		     1		pop dx
					
					;0-11 for am, no convert
					;12 for pm, no convert
					;13-24 for pm, convert
					
					;hours
 0050  C1 E9 0B				shr cx, 11			;clear out the rest of cx
 0053  83 F9 00				cmp cx, 0			;is cx midnight?
 0056  74 11				je midnight			;at midnight, 0 becomes 12am
 0058  83 F9 0B				cmp cx, 11			;is cx less than or equal to 11		
 005B  76 13				jbe noConvertTime		;all times below 11 require no converstion, and an am flag
 005D  83 F9 0C				cmp cx, 12			;is cx noon?
 0060  74 12				je noon				;at noon, we need to set the pm flag, but we dont need to convert
 0062  83 E9 0C				sub cx, 12			;for all other cases, we convert and set the pm flag
 0065  B0 01				mov al, 1			;1 means pm
 0067  EB 0D				jmp endConvert			;not any special case
					
 0069					midnight:			
 0069  B9 000C				mov cx, 12			;0 hours=12 hours
 006C  B0 00				mov al, 0			;0 means am
 006E  EB 06				jmp endConvert
 0070					noConvertTime:			
 0070  B0 00				mov al, 0			;0 means am
 0072  EB 02				jmp endConvert
 0074					noon:				
 0074  B0 01				mov al, 1			;1 means pm
 0076					endConvert:
					mWriteDecWord cx		;write the hours
 0076  50		     1		push ax
 0077  8B C1		     1		mov ax, cx
 0079  E8 0000 E	     1		call writedec
 007C  58		     1		pop ax
					mWriteString colon		;write a colon
 007D  52		     1		push dx
 007E  BA 008B R	     1		mov dx, offset colon
 0081  E8 0000 E	     1		call writestring
 0084  5A		     1		pop dx
					
					;minutes
 0085  59				pop cx				;restore cx
 0086  C1 E1 05				shl cx, 5			;clear out left side
 0089  C1 E9 0A				shr cx, 10			;clear out right side
					mWriteDecWord cx		;write the minutes
 008C  50		     1		push ax
 008D  8B C1		     1		mov ax, cx
 008F  E8 0000 E	     1		call writedec
 0092  58		     1		pop ax
					mWriteString space		;write a space
 0093  52		     1		push dx
 0094  BA 0089 R	     1		mov dx, offset space
 0097  E8 0000 E	     1		call writestring
 009A  5A		     1		pop dx
					
 009B  3C 00				cmp al, 0			;is the am/pm flag 0
 009D  74 0A				je amCase			;if it is 0, the time is am
					mWriteString pm			;if not, the time is pm
 009F  52		     1		push dx
 00A0  BA 0083 R	     1		mov dx, offset pm
 00A3  E8 0000 E	     1		call writestring
 00A6  5A		     1		pop dx
 00A7  EB 08				jmp endAmPm			;jump over
 00A9					amCase:
					mWriteString am			;the time is am if al=0
 00A9  52		     1		push dx
 00AA  BA 007D R	     1		mov dx, offset am
 00AD  E8 0000 E	     1		call writestring
 00B0  5A		     1		pop dx
 00B1					endAmPm:
					
 00B1  52				push dx				;dx is our date, which we want to save
 00B2  C1 E2 07				shl dx, 7			;clear out dx
 00B5  C1 EA 0C				shr dx, 12			;put the month part in the least significant bits
					
					;this big ol switch statements looks at dx, and prints the month string
					;depending on the value (1=january, 2=febuary, etc...)
 00B8  83 FA 01				cmp dx, 1
 00BB  74 37				je jan
 00BD  83 FA 02				cmp dx, 2
 00C0  74 3C				je feb
 00C2  83 FA 03				cmp dx, 3
 00C5  74 41				je mar
 00C7  83 FA 04				cmp dx, 4
 00CA  74 46				je apr
 00CC  83 FA 05				cmp dx, 5
 00CF  74 4B				je may
 00D1  83 FA 06				cmp dx, 6
 00D4  74 50				je jun
 00D6  83 FA 07				cmp dx, 7
 00D9  74 55				je jul
 00DB  83 FA 08				cmp dx, 8
 00DE  74 5A				je aug
 00E0  83 FA 09				cmp dx, 9
 00E3  74 5F				je sep
 00E5  83 FA 0A				cmp dx, 10
 00E8  74 64				je oct
 00EA  83 FA 0B				cmp dx, 11
 00ED  74 69				je nov
 00EF  83 FA 0C				cmp dx, 12
 00F2  74 6E				je dece
 00F4					jan:
					mWriteString janString
 00F4  52		     1		push dx
 00F5  BA 0090 R	     1		mov dx, offset janString
 00F8  E8 0000 E	     1		call writestring
 00FB  5A		     1		pop dx
 00FC  EB 76				jmp endMonth
 00FE					feb:
					mWriteString febString
 00FE  52		     1		push dx
 00FF  BA 0099 R	     1		mov dx, offset febString
 0102  E8 0000 E	     1		call writestring
 0105  5A		     1		pop dx
 0106  EB 6C				jmp endMonth
 0108					mar:
					mWriteString marString
 0108  52		     1		push dx
 0109  BA 00A3 R	     1		mov dx, offset marString
 010C  E8 0000 E	     1		call writestring
 010F  5A		     1		pop dx
 0110  EB 62				jmp endMonth
 0112					apr:
					mWriteString aprString
 0112  52		     1		push dx
 0113  BA 00AA R	     1		mov dx, offset aprString
 0116  E8 0000 E	     1		call writestring
 0119  5A		     1		pop dx
 011A  EB 58				jmp endMonth
 011C					may:
					mWriteString mayString
 011C  52		     1		push dx
 011D  BA 00B1 R	     1		mov dx, offset mayString
 0120  E8 0000 E	     1		call writestring
 0123  5A		     1		pop dx
 0124  EB 4E				jmp endMonth
 0126					jun:
					mWriteString junString
 0126  52		     1		push dx
 0127  BA 00B6 R	     1		mov dx, offset junString
 012A  E8 0000 E	     1		call writestring
 012D  5A		     1		pop dx
 012E  EB 44				jmp endMonth
 0130					jul:
					mWriteString julString
 0130  52		     1		push dx
 0131  BA 00BC R	     1		mov dx, offset julString
 0134  E8 0000 E	     1		call writestring
 0137  5A		     1		pop dx
 0138  EB 3A				jmp endMonth
 013A					aug:
					mWriteString augString
 013A  52		     1		push dx
 013B  BA 00C2 R	     1		mov dx, offset augString
 013E  E8 0000 E	     1		call writestring
 0141  5A		     1		pop dx
 0142  EB 30				jmp endMonth
 0144					sep:
					mWriteString sepString
 0144  52		     1		push dx
 0145  BA 00CA R	     1		mov dx, offset sepString
 0148  E8 0000 E	     1		call writestring
 014B  5A		     1		pop dx
 014C  EB 26				jmp endMonth
 014E					oct:
					mWriteString octString
 014E  52		     1		push dx
 014F  BA 00D5 R	     1		mov dx, offset octString
 0152  E8 0000 E	     1		call writestring
 0155  5A		     1		pop dx
 0156  EB 1C				jmp endMonth
 0158					nov:
					mWriteString novString
 0158  52		     1		push dx
 0159  BA 00DE R	     1		mov dx, offset novString
 015C  E8 0000 E	     1		call writestring
 015F  5A		     1		pop dx
 0160  EB 12				jmp endMonth
 0162					dece:
					mWriteString decString
 0162  52		     1		push dx
 0163  BA 00E8 R	     1		mov dx, offset decString
 0166  E8 0000 E	     1		call writestring
 0169  5A		     1		pop dx
 016A  EB 08				jmp endMonth
 016C					errorWiteMonth:
					mWriteString errorMonthString	
 016C  52		     1		push dx
 016D  BA 00F2 R	     1		mov dx, offset errorMonthString
 0170  E8 0000 E	     1		call writestring
 0173  5A		     1		pop dx
 0174					endmonth:
					
 0174  5A				pop dx				;restore dx
 0175  52				push dx				;save it again
					
 0176  C1 E2 0B				shl dx, 11			;clear out the bits we dont need
 0179  C1 EA 0B				shr dx, 11			;move the bits to the least significant position
					
					mWriteDecWord dx		;write the date
 017C  50		     1		push ax
 017D  8B C2		     1		mov ax, dx
 017F  E8 0000 E	     1		call writedec
 0182  58		     1		pop ax
					mWriteString comma		;write a comma
 0183  52		     1		push dx
 0184  BA 008D R	     1		mov dx, offset comma
 0187  E8 0000 E	     1		call writestring
 018A  5A		     1		pop dx
					
 018B  5A				pop dx				;restore dx to print year
 018C  C1 EA 09				shr dx, 9			;move the year to the last significant position
 018F  81 C2 07BC			add dx, 1980		;add 1980, because our MSDOS call gets the number of years since 1980
					mWriteDecWord dx	;write the year
 0193  50		     1		push ax
 0194  8B C2		     1		mov ax, dx
 0196  E8 0000 E	     1		call writedec
 0199  58		     1		pop ax
					
					exit				;end
					
 019E					fileNotFound:			;if the file was not found
					mWriteString fileNotFoundString	;print that the file was not found
 019E  52		     1		push dx
 019F  BA 003A R	     1		mov dx, offset fileNotFoundString
 01A2  E8 0000 E	     1		call writestring
 01A5  5A		     1		pop dx
 01A6  E8 0000 E			call crlf
 01A9  E9 FE61				jmp input			;ask for input again
					
 01AC					errorDate:			;if there was a date obtaining date info
					mWriteString errorString	;print the error string
 01AC  52		     1		push dx
 01AD  BA 005B R	     1		mov dx, offset errorString
 01B0  E8 0000 E	     1		call writestring
 01B3  5A		     1		pop dx
					mWriteDecWord ax		;print the error number
 01B4  50		     1		push ax
 01B5  8B C0		     1		mov ax, ax
 01B7  E8 0000 E	     1		call writedec
 01BA  58		     1		pop ax
					exit				;exit
 01BF				main ENDP

				;this procedure was written by irvine, and was copied from the book, pages 590-591
				;returns cf=1 if no command line args are given, cf=0 if everything is OK
				;puts the command tail into a buffer, whose offset is specified by dx
 01BF				getcommandtail PROC
 01BF  06			push es
 01C0  60			pusha

 01C1  B4 62			mov ah, 62h
 01C3  CD 21			int 21h
 01C5  8E C3			mov es, bx
 01C7  8B F2			mov si, dx
 01C9  BF 0081			mov di, 81h
 01CC  B9 0000			mov cx, 0
 01CF  26: 8A 4D FF		mov cl,es:[di-1]
 01D3  83 F9 00			cmp cx, 0
 01D6  74 15			je L2
 01D8  FC			cld
 01D9  B0 20			mov al, 20h
 01DB  F3/ AE			repz scasb
 01DD  74 0E			jz L2
 01DF  4F			dec di
 01E0  41			inc cx
 01E1				L1:
 01E1  26: 8A 05		mov al,es:[di]
 01E4  88 04			mov [si],al
 01E6  46			inc si
 01E7  47			inc di
 01E8  E2 F7			loop L1
 01EA  F8			clc
 01EB  EB 01			jmp L3
 01ED				L2:
 01ED  F9			stc
 01EE				L3:
 01EE  C6 04 00			mov byte ptr [si],0
 01F1  61			popa
 01F2  07			pop es
 01F3  C3			ret
 01F4				getcommandtail ENDP
				END main
